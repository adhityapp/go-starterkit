export CGO_ENABLED=0

sql-gen: 
	docker run --rm -v $(pwd):/src -w /src sqlc/sqlc:1.22.0 generate 

swagger-concat: 
	echo "make swagger-concat" swagger mixin 
	--output=schema/swagger/tmp.yaml 
	--format=yaml 
	--keep-spec-order schema/swagger/config/main.yaml schema/swagger/definitions/* swagger flatten schema/swagger/tmp.yaml 
	--output=schema/swagger/swagger.yaml 
	--format=yaml sed -i '1s@^@# Code generated by "make swagger"; DO NOT EDIT.\n@' schema/swagger/swagger.yaml rm -rf schema/swagger/tmp.yaml 

swagger-serve: $(MAKE) swagger-concat swagger serve schema/swagger/swagger.yaml --port=8081 --no-open --flavor=swagger 

swagger-gen: 
	swagger_debug=1 swagger mixin \ 
	--output=schema/swagger/$(service).yaml \ 
	--format=yaml \ 
	--keep-spec-order schema/swagger/config/main.yaml \ 
	schema/swagger/definitions/$(service).yaml rm -rf api/rest/$(service) || true swagger_debug=1 swagger generate server \ 
	--allow-template-override \ 
	--template-dir=schema/swagger/templates/server \ 
	--spec=schema/swagger/$(service).yaml \ 
	--server-package=api/rest/$(service) \ 
	--model-package=api/rest/$(service)/definitions \ 
	--exclude-main \ 
	--skip-tag-packages \ 
	--config-file=schema/swagger/config/go-swagger.yaml \ 
	-q rm -rf schema/swagger/$(service).yaml || true 
	
graph-gen: rm -rf api/graphql/$(service) || true mkdir -p api/graphql/$(service) protoc \ --go_out=api/graphql \ --go-grpc_out=api/graphql \ --graphql_out=api/graphql \ schema/protobuf/$(service).proto release: GOOS=darwin GOARCH=arm64 go build -o build/app.darwin-arm64 . GOOS=darwin GOARCH=amd64 go build -o build/app.darwin-amd64 . GOOS=linux GOARCH=amd64 go build -o build/app.linux-amd64 . GOOS=windows GOARCH=amd64 go build -o build/app.win-amd64 .